# 25년 간의 수행 끝에 원재는 미래를 보는 능력을 갖게 되었다. 이 능력으로 원재는 사재기를 하려고 한다.

# 다만 당국의 감시가 심해 한 번에 많은 양을 사재기 할 수 없다.

# 다음과 같은 조건 하에서 사재기를 하여 최대한의 이득을 얻도록 도와주자.

#     1. 원재는 연속된 N일 동안의 물건의 매매가를 예측하여 알고 있다.
#     2. 당국의 감시망에 걸리지 않기 위해 하루에 최대 1만큼 구입할 수 있다.
#     3. 판매는 얼마든지 할 수 있다.

# 예를 들어 3일 동안의 매매가가 1, 2, 3 이라면 처음 두 날에 원료를 구매하여 마지막 날에 팔면 3의 이익을 얻을 수 있다.


# [입력]

# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

# 각 테스트 케이스 별로 첫 줄에는 자연수 N(2 ≤ N ≤ 1,000,000)이 주어지고,

# # 둘째 줄에는 각 날의 매매가를 나타내는 N개의 자연수들이 공백으로 구분되어 순서대로 주어진다.

# # 각 날의 매매가는 10,000이하이다.


# # [출력]

# # 각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고, 최대 이익을 출력한다.


# # 리스트로 받아서 마지막 인덱스 숫자와 하나씩 비교하며 차이가 양수일때만 그 리스트 값을 추가
# # 합계 리스트 만들기
# 증가하면 반복문 돌게 구현


t = int(input())                                     # 케이스 개수
for i in range(t):                                   # 케이스 반복
    k = int(input())                                 # 케이스 내부 가격 개수
    cost_lst = list(map(int,input().split()))        # 가격 리스트
    cost_sum = 0                                     # 가격 이득 초기값
    idx1 = -1                                        # 인덱스 접근 위해 초기값
    while True:
        if idx1 == k-1:                                # 최신화된 이전 인덱스가 마지막 인덱스 일때
            break                                      # 제일 끝에가 큰 수이므로
        print(max(cost_lst[idx1+1:]))
        cnt = -1
        for l in cost_lst[::-1]:
            if l == max(cost_lst[idx1+1:]):
                idx2 = cnt
            else:
                cnt -= 1
        print(cost_lst)
        for cst in cost_lst[idx1+1:idx2]:
            if cost_lst[idx2] - cst > 0:
                cost_sum += cost_lst[idx2]-cst 
        if cost_lst[idx2] == min(cost_lst):
            break
        idx1 = idx2
    print(f'#{i+1} {cost_sum}')